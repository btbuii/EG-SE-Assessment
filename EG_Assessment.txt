2. Using the created class, answer the following questions:
a. Is entering via the light blue boundary a common strategy used by Team2 on T side?


We'll check the data for rows that fall within the boundary using the filter_data method, and then review only 
rows in which the team is Team2 and side is T.

filtered_data = PSG.filter_data(boundary_vertices)
frequency = filtered_data[filtered_data['team'] == 'Team2'][filtered_data['side'] == 'T'].shape[0]


b. What is the average timer that Team2 on T (terrorist) side enters "BombsiteB" with at least 2 rifles or SMGs?


We'll check the data for rows in which team is Team2, side is T, and weapon_class is SMG or rifle.
If there's at least two rows, we find the average timer using mean().

filtered_data = PSG.filter_data([BombsiteB_Coordinates])

new_filtered_data = filtered_data([BombsiteB_Coordinates])
    (filtered_data['team'] == 'Team2') &
    (filtered_data['side'] == 'T') &
    (filtered_data['weapon_class'].isin(['rifle', 'SMG']))
]

average_timer_team2_t = filtered_data['timer'].mean()


c. Now that we've gathered data on Team2 T side, let's examine their CT (counter-terrorist) side. Using the same
data set, tell our coaching staff where you suspect them to be waiting inside "BombsiteB"
Hint: Try a heatmap

One way to discover an answer to this would be to find average locations that CT camps, and return the most common ones.

filtered_data = PSG.filter_data([BombsiteB_Coordinates]

new_filtered_data = filtered_data[
    (filtered_data['team'] == 'Team2') &
    (filtered_data['side'] == 'CT')
]

locations = new_filtered_data['location'].value_counts()

3. Most of the time, our stakeholders (in this case, the CS:GO coaching staff) aren't tech-savvy enough to run code
themselves. Propose a solution to your product manager that:
a. could allow our coaching staff to request or acquire the output themselves
b. takes less than 1 weeks worth of work to implement

I would propose hosting a program in an easily-accessible, yet secure method that would allow the coaching staff to
readily access the output themselves without sacrificing security. 

i. Hosting a program similar to this one on a website requiring login credentials could certainly work and would be
up and running in less than a week. Security would need to be regulated heavily by ensuring 2FA and protection at
all points, as access by competitors could be detrimental.

ii. An arguably less-secure, yet even more easily-accessible method could be to host this program via a Discord Bot,
and create a Discord Server (or use an existing one dedicated to EG) with a channel dedicated to the coaching staff.

Staff would upload their files and could directly receive output, whether on mobile or desktop. The only points of 
security concern would be the Discord accounts of the staff themselves, which would prove an issue regardless of how
we may implement the program.

In either case, to accommodate for the lack of tech-savviness, user input can be read and sent to a more customized
method for ProcessGameState that would allow for more flexible inputs and outputs. We would be able to answer questions
such as those in Question 2 above ^^ in an extremely powerful and efficient manner.
